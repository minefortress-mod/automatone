/*
 * This file is part of Baritone.
 *
 * Baritone is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Baritone is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with Baritone.  If not, see <https://www.gnu.org/licenses/>.
 */

plugins {
    id 'java'
    id 'fabric-loom' version '1.2.7'
    id 'maven-publish'
}

group project.maven_group
version System.getenv("TAG_NAME") ?: project.mod_version

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

compileJava {
    options.encoding = "UTF-8" // allow emoji in comments :^)
}


sourceSets {
    api {
        compileClasspath += main.compileClasspath
    }
    main {
        compileClasspath += api.output
    }
    launch {
        compileClasspath += main.compileClasspath + main.runtimeClasspath + main.output
        runtimeClasspath += main.compileClasspath + main.runtimeClasspath + main.output
    }
    schematica_api {
        compileClasspath += main.compileClasspath
    }
    main {
        compileClasspath += schematica_api.output
    }
}

repositories {
    mavenCentral()
    maven {
        url 'https://jitpack.io'
    }
    maven {
        name = "Ladysnake Mods"
        url = "https://maven.ladysnake.org/releases"
        content {
            includeGroup("org.ladysnake")
            includeGroup("io.github.ladysnake")
            includeGroupByRegex("dev\\.emi.*")
            includeGroupByRegex("dev\\.onyxstudios.*")
        }
    }
    maven {
        url "https://maven.jamieswhiteshirt.com/libs-release"
        content {
            includeGroup "com.jamieswhiteshirt"
        }
    }

    mavenLocal()
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings "net.fabricmc:yarn:${yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${loader_version}"
    implementation 'com.google.code.findbugs:jsr305:3.0.2'
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"
    modImplementation "com.github.minefortress-mod.minefortress-cc-api:cardinal-components-base:5.2.9-minefortress"
    modImplementation "com.github.minefortress-mod.minefortress-cc-api:cardinal-components-entity:5.2.9-minefortress"
    modImplementation "com.github.minefortress-mod.minefortress-cc-api:cardinal-components-world:5.2.9-minefortress"
//    modImplementation "com.jamieswhiteshirt:reach-entity-attributes:${reach_version}"
}

processLaunchResources {
    inputs.property "version", project.version
    filesMatching('fabric.mod.json') {
        expand "version": project.version
    }
}

java {
    withSourcesJar()
}

javadoc {
    options.addStringOption('Xwerror', '-quiet') // makes the build fail on travis when there is a javadoc error
    options.linkSource true
    options.encoding "UTF-8" // allow emoji in comments :^)
    source = sourceSets.api.allJava
    classpath += sourceSets.api.compileClasspath
}

jar {
    from sourceSets.launch.output, sourceSets.api.output

    preserveFileTimestamps = false
    reproducibleFileOrder = true

    manifest {
        attributes(
                'MixinConfigs': 'mixins.automatone.json',

                'Implementation-Title': 'Automatone',
                'Implementation-Version': project.version
        )
    }
}

publishing {
    repositories {
        mavenLocal()
    }
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}